<script client:load>
function initLeaderboards() {
  const perPage = 20
  let allData = { points: [], watchtime: [] }
  let filteredData = { points: [], watchtime: [] }
  let indexes = { points: 0, watchtime: 0 }

  const containers = {
    points: document.getElementById('points-list'),
    watchtime: document.getElementById('watchtime-list'),
  }
  const buttons = {
    points: document.getElementById('loadMorePoints'),
    watchtime: document.getElementById('loadMoreWatchtime'),
  }
  const lessButtons = {
    points: document.getElementById('showLessPoints'),
    watchtime: document.getElementById('showLessWatchtime'),
  }

  function renderSegment(id) {
    const container = containers[id]
    const button = buttons[id]
    const lessButton = lessButtons[id]
    const users = filteredData[id]
    const start = indexes[id]
    const end = start + perPage
    const slice = users.slice(start, end)

    slice.forEach((user, i) => {
      const rank = start + i + 1
      const showLogin =
        user.UserName.toLowerCase() !== user.UserLogin.toLowerCase()
          ? ` <span class='text-gray-400 text-sm'>(${user.UserLogin})</span>`
          : ''
      const el = document.createElement('div')
      el.className =
        'flex justify-between items-center bg-black/40 p-4 rounded-xl border border-[#c6a44f]/30 backdrop-blur-sm'
      el.innerHTML = `
        <div class="flex items-center gap-3 text-gray-200">
          <span class="text-[#f7e6ac] font-bold w-8 text-right">${rank}.</span>
          <span class="font-semibold">${user.UserName}</span>${showLogin}
        </div>
        <span class="text-[#f7e6ac] font-bold">${user.Value}</span>
      `
      container.appendChild(el)
    })

    indexes[id] += perPage
    button.style.display = indexes[id] >= users.length ? 'none' : 'block'
    lessButton.style.display = indexes[id] > perPage ? 'block' : 'none'
  }

  function removeSegment(id) {
    const container = containers[id]
    const button = buttons[id]
    const lessButton = lessButtons[id]
    if (indexes[id] > perPage) {
      indexes[id] -= perPage
      for (let i = 0; i < perPage && container.children.length > perPage; i++) {
        container.removeChild(container.lastChild)
      }
    }
    button.style.display = 'block'
    lessButton.style.display = indexes[id] > perPage ? 'block' : 'none'
  }

  function resetAndRender() {
    for (const key in containers) {
      containers[key].innerHTML = ''
      indexes[key] = 0
      buttons[key].style.display = 'block'
      lessButtons[key].style.display = 'none'
      renderSegment(key)
    }
  }

  function handleSearch(value) {
    const q = value.toLowerCase()
    filteredData.points = allData.points.filter(
      u =>
        u.UserName.toLowerCase().includes(q) ||
        u.UserLogin.toLowerCase().includes(q)
    )
    filteredData.watchtime = allData.watchtime.filter(
      u =>
        u.UserName.toLowerCase().includes(q) ||
        u.UserLogin.toLowerCase().includes(q)
    )
    resetAndRender()
  }

  buttons.points?.addEventListener('click', () => renderSegment('points'))
  buttons.watchtime?.addEventListener('click', () => renderSegment('watchtime'))
  lessButtons.points?.addEventListener('click', () => removeSegment('points'))
  lessButtons.watchtime?.addEventListener('click', () => removeSegment('watchtime'))
  document.getElementById('search')?.addEventListener('input', e => handleSearch(e.target.value))

  fetch('/tnx-site/api/leaderboard_data.json', { cache: 'no-store' })
    .then(res => res.json())
    .then(data => {
      allData = data
      filteredData = structuredClone(allData)
      resetAndRender()
    })
    .catch(err => console.error('Failed to load leaderboard data', err))
}

document.addEventListener('astro:page-load', () => {
  requestAnimationFrame(() => {
    initLeaderboards()
  })
})
</script>
