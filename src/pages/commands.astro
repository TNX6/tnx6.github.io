---
import Layout from '~/layouts/PageLayout.astro'
import fs from 'fs'
import path from 'path'

const metadata = {
  title: 'Commands â€” TNX6',
  ignoreTitleTemplate: true,
}

let commands = []
try {
  const filePath = path.resolve('public/api/commands.json')
  const data = fs.readFileSync(filePath, 'utf-8')
  commands = JSON.parse(data)
} catch (e) {
  console.error('Fehler beim Laden der commands.json:', e)
}

const groups = {}
for (const cmd of commands) {
  if (!groups[cmd.Group]) groups[cmd.Group] = []
  groups[cmd.Group].push(cmd)
}
---

<Layout metadata={metadata}>
  <section class="max-w-5xl mx-auto py-16 px-6 text-white">
    <h1 class="text-5xl font-extrabold text-center mb-14 bg-gradient-to-r from-[#ffda6a] to-[#c29200] bg-clip-text text-transparent drop-shadow-[0_0_12px_rgba(198,164,79,0.5)] tracking-wider">
      COMMANDS
    </h1>

    <div class="mb-10">
      <input
        id="commandSearch"
        type="text"
        placeholder="Search commands..."
        class="w-full px-4 py-3 rounded-lg bg-black/40 border border-[#c6a44f]/40 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#c6a44f]"
      />
    </div>

    <div id="commandList">
      {Object.keys(groups).length === 0 ? (
        <p class="text-gray-400 text-center">No commands found.</p>
      ) : (
        Object.keys(groups).map(group => (
          <div class="mb-10 group-block bg-gradient-to-br from-[#0a0a0c]/80 to-[#1a1408]/80 rounded-2xl p-6 border border-[#c6a44f]/30 shadow-[0_0_15px_rgba(198,164,79,0.15)] backdrop-blur-md">
            <h2 class="text-3xl font-bold text-center mb-6 text-[#f7e6ac] uppercase tracking-wide">{group}</h2>
            <ul class="space-y-3 group-commands">
              {groups[group].map(cmd => (
                <li class="border border-[#c6a44f]/20 rounded-xl p-4 bg-black/30 backdrop-blur-sm command-item">
                  <div class="font-bold mb-1 text-[#f7e6ac] text-lg command-name">{cmd.Name}</div>
                  <div class="text-gray-300 text-sm flex flex-wrap gap-2 command-aliases">
                    {cmd.Commands?.map(c => (
                      <span class="bg-[#c6a44f]/15 text-[#f7e6ac] px-3 py-1 rounded-md border border-[#c6a44f]/30 text-xs font-mono">{c}</span>
                    ))}
                  </div>
                </li>
              ))}
            </ul>
          </div>
        ))
      )}
    </div>
  </section>

  <script is:inline data-reinit>
    const input = document.getElementById('commandSearch')
    const blocks = document.querySelectorAll('.group-block')

    input.addEventListener('input', () => {
      const term = input.value.toLowerCase().trim()

      blocks.forEach(block => {
        const commands = block.querySelectorAll('.command-item')
        let visibleCount = 0

        commands.forEach(cmd => {
          const name = cmd.querySelector('.command-name').textContent.toLowerCase()
          const aliases = Array.from(cmd.querySelectorAll('.command-aliases span')).map(s => s.textContent.toLowerCase())
          const match = name.includes(term) || aliases.some(a => a.includes(term))
          cmd.style.display = match ? '' : 'none'
          if (match) visibleCount++
        })

        block.style.display = visibleCount > 0 ? '' : 'none'
      })
    })
  </script>
</Layout>
