---
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: 'Leaderboards â€” TNX6',
  ignoreTitleTemplate: true,
};
---

<Layout metadata={metadata}>
  <section class="max-w-6xl mx-auto py-16 px-6 space-y-16 text-white">
    <h1 class="text-4xl font-extrabold text-center mb-12 bg-gradient-to-r from-[#ffda6a] to-[#c29200] bg-clip-text text-transparent drop-shadow-[0_0_10px_rgba(198,164,79,0.5)]">
      Leaderboards
    </h1>

    <div class="text-center mb-12">
      <input
        id="search"
        type="text"
        placeholder="Search users..."
        class="w-full max-w-md px-4 py-2 rounded-lg bg-black/40 border border-[#c6a44f]/30 text-[#f7e6ac] placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#c6a44f]/60"
      />
    </div>

    <!-- POINTS -->
    <div>
      <h2 class="text-3xl font-bold mb-8 bg-gradient-to-r from-[#ffda6a] to-[#c29200] bg-clip-text text-transparent">Points</h2>
      <div id="points-list" class="space-y-3"></div>
      <div class="flex justify-center gap-4 mt-6">
        <button id="loadMorePoints" class="px-6 py-2 bg-[#c6a44f]/20 border border-[#c6a44f]/40 rounded-lg text-[#f7e6ac] hover:bg-[#c6a44f]/30 transition">Show More</button>
        <button id="showLessPoints" class="px-6 py-2 bg-[#c6a44f]/10 border border-[#c6a44f]/30 rounded-lg text-[#f7e6ac] hover:bg-[#c6a44f]/20 transition hidden">Show Less</button>
      </div>
    </div>

    <!-- WATCHTIME -->
    <div>
      <h2 class="text-3xl font-bold mb-8 bg-gradient-to-r from-[#ffda6a] to-[#c29200] bg-clip-text text-transparent">Watchtime</h2>
      <div id="watchtime-list" class="space-y-3"></div>
      <div class="flex justify-center gap-4 mt-6">
        <button id="loadMoreWatchtime" class="px-6 py-2 bg-[#c6a44f]/20 border border-[#c6a44f]/40 rounded-lg text-[#f7e6ac] hover:bg-[#c6a44f]/30 transition">Show More</button>
        <button id="showLessWatchtime" class="px-6 py-2 bg-[#c6a44f]/10 border border-[#c6a44f]/30 rounded-lg text-[#f7e6ac] hover:bg-[#c6a44f]/20 transition hidden">Show Less</button>
      </div>
    </div>
  </section>

  <script is:inline>
    const perPage = 20
    let allData = { points: [], watchtime: [] }
    let filteredData = { points: [], watchtime: [] }
    let indexes = { points: 0, watchtime: 0 }

    const containers = {
      points: document.getElementById('points-list'),
      watchtime: document.getElementById('watchtime-list'),
    }
    const buttons = {
      points: document.getElementById('loadMorePoints'),
      watchtime: document.getElementById('loadMoreWatchtime'),
    }
    const lessButtons = {
      points: document.getElementById('showLessPoints'),
      watchtime: document.getElementById('showLessWatchtime'),
    }

    function renderSegment(id) {
      const container = containers[id]
      const button = buttons[id]
      const lessButton = lessButtons[id]
      const users = filteredData[id]
      const start = indexes[id]
      const end = start + perPage
      const slice = users.slice(start, end)

      slice.forEach((user, i) => {
        const rank = start + i + 1
        const showLogin =
          user.UserName.toLowerCase() !== user.UserLogin.toLowerCase()
            ? ` <span class='text-gray-400 text-sm'>(${user.UserLogin})</span>`
            : ''
        const el = document.createElement('div')
        el.className =
          'flex justify-between items-center bg-black/40 p-4 rounded-xl border border-[#c6a44f]/30 backdrop-blur-sm'
        el.innerHTML = `
          <div class="flex items-center gap-3 text-gray-200">
            <span class="text-[#f7e6ac] font-bold w-8 text-right">${rank}.</span>
            <span class="font-semibold">${user.UserName}</span>${showLogin}
          </div>
          <span class="text-[#f7e6ac] font-bold">${user.Value}</span>
        `
        container.appendChild(el)
      })

      indexes[id] += perPage
      button.style.display = indexes[id] >= users.length ? 'none' : 'block'
      lessButton.style.display = indexes[id] > perPage ? 'block' : 'none'
    }

    function removeSegment(id) {
      const container = containers[id]
      const button = buttons[id]
      const lessButton = lessButtons[id]
      const children = container.children
      if (indexes[id] > perPage) {
        indexes[id] -= perPage
        for (let i = 0; i < perPage && children.length > perPage; i++) {
          container.removeChild(container.lastChild)
        }
      }
      button.style.display = 'block'
      lessButton.style.display = indexes[id] > perPage ? 'block' : 'none'
    }

    function resetAndRender() {
      for (const key in containers) {
        containers[key].innerHTML = ''
        indexes[key] = 0
        buttons[key].style.display = 'block'
        lessButtons[key].style.display = 'none'
        renderSegment(key)
      }
    }

    function handleSearch(value) {
      const q = value.toLowerCase()
      filteredData.points = allData.points.filter(
        u =>
          u.UserName.toLowerCase().includes(q) ||
          u.UserLogin.toLowerCase().includes(q)
      )
      filteredData.watchtime = allData.watchtime.filter(
        u =>
          u.UserName.toLowerCase().includes(q) ||
          u.UserLogin.toLowerCase().includes(q)
      )
      resetAndRender()
    }

    buttons.points.addEventListener('click', () => renderSegment('points'))
    buttons.watchtime.addEventListener('click', () => renderSegment('watchtime'))
    lessButtons.points.addEventListener('click', () => removeSegment('points'))
    lessButtons.watchtime.addEventListener('click', () => removeSegment('watchtime'))
    document.getElementById('search').addEventListener('input', e => handleSearch(e.target.value))

    fetch('/tnx-site/api/leaderboard_data.json')
      .then(res => res.json())
      .then(data => {
        allData = data
        filteredData = structuredClone(allData)
        resetAndRender()
      })
      .catch(err => console.error('Failed to load leaderboard data', err))
  </script>
</Layout>
